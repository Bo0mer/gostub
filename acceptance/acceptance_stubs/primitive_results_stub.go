// Generated by 'github.com/mokiat/gostub'

package acceptance_stubs

import (
	sync "sync"

	alias1 "github.com/mokiat/gostub/acceptance"
)

type PrimitiveResultsStub struct {
	StubGUID        int
	UserStub        func() (result1 string, result2 int, result3 float32)
	userMutex       sync.RWMutex
	userArgsForCall []struct {
	}
	userReturns struct {
		result1 string
		result2 int
		result3 float32
	}
}

var _ alias1.PrimitiveResults = new(PrimitiveResultsStub)

func (stub *PrimitiveResultsStub) User() (string, int, float32) {
	stub.userMutex.Lock()
	defer stub.userMutex.Unlock()
	stub.userArgsForCall = append(stub.userArgsForCall, struct {
	}{})
	if stub.UserStub != nil {
		return stub.UserStub()
	} else {
		return stub.userReturns.result1, stub.userReturns.result2, stub.userReturns.result3
	}
}
func (stub *PrimitiveResultsStub) UserCallCount() int {
	stub.userMutex.RLock()
	defer stub.userMutex.RUnlock()
	return len(stub.userArgsForCall)
}
func (stub *PrimitiveResultsStub) UserReturns(result1 string, result2 int, result3 float32) {
	stub.userMutex.Lock()
	defer stub.userMutex.Unlock()
	stub.userReturns = struct {
		result1 string
		result2 int
		result3 float32
	}{result1, result2, result3}
}
